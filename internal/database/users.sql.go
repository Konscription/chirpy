// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ( created_at, updated_at, email, hashed_password)
VALUES (
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	IsChirpyRed bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const lookupUserById = `-- name: LookupUserById :one
SELECT
    id,
    created_at,
    updated_at,
    email,
    is_chirpy_red
FROM
    users
WHERE
    id = $1
`

type LookupUserByIdRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	IsChirpyRed bool
}

func (q *Queries) LookupUserById(ctx context.Context, id uuid.UUID) (LookupUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, lookupUserById, id)
	var i LookupUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const lookupUserbyEmail = `-- name: LookupUserbyEmail :one
SELECT
    id,
    created_at,
    updated_at,
    email,
    hashed_password,
    is_chirpy_red
FROM
    users
WHERE
    email = $1
`

func (q *Queries) LookupUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, lookupUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    updated_at = NOW(),
    hashed_password = $2,
    email = $3
WHERE
    id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID
	HashedPassword string
	Email          string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.HashedPassword, arg.Email)
	return err
}
